// Algorithm        : Graham Scan
// For              : Finding Convex Hull of a finite set of points
// Time Complexity  : O(nlogn) n=number of points
// Space Complexity : O(n)

#include<iostream>
#include<stdio.h>
#include<algorithm>
#define MAX 1000001
using namespace std;
struct point
{
       int x;
       int y;
};

struct point P[MAX];

struct point P0;

int dist(point a, point b)
{          
          return ((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));
}
int check_rotation(point a, point b, point c)
{
    int temp=((b.y-a.y)*(c.x-b.x)-(c.y-b.y)*(b.x-a.x));
    if(temp>0) // clockwise direction
    return -1;
    else if(temp==0) // collinear
    return 0;
    else return 1; // anti-clockwise direction
}
bool comp_angle(const point &a, const point &b)
{
     int rotate=check_rotation(P0,a,b);
     if(rotate==0)
     return(dist(a,P0)<dist(b,P0)); // to ensure that the farther collinear point is present at the farther end.
     else return (rotate>0); // swap a and b when the rotation of the triplet(P0,a,b) is in clockwise direction else do nothing.
}
int main()
{
    //num_points=number of points
    //P[]=structure array of point
    
    int num_points, i, x_coord, y_coord;
    freopen("test_graham_scan.txt","r",stdin);
    scanf("%d",&num_points);
    
    for(i=0;i<num_points;++i)
    {
        scanf("%d%d",&x_coord,&y_coord);
        P[i].x=x_coord;
        P[i].y=y_coord;
    }
                             
    //find the smallest y value and the corresponding index in the structure array P.
                                                          
    int min_y_idx=0;  // index of the minimum y value
    
    for(i=1;i<num_points;++i)
    {
        if(P[i].y<P[min_y_idx].y)
        min_y_idx=i;              
        else if(P[i].y==P[min_y_idx].y) // if the minimum y value is shared by 1 or more variables, then find the index of the minimum x value        
        {
             if(P[i].x<P[min_y_idx].x)        
             min_y_idx=i;        
        }
    }
    
    //swapping P[min_y_idx] with P[0] so that the lowest point(in terms of y-coordinate) comes first
    
    struct point temp;
    temp=P[min_y_idx];
    P[min_y_idx]=P[0];
    P[0]=temp;
    
    P0=P[0];
        
    //sorting the structure array P according to y-coordinates and if two y-coordinates are same then according to there x-coordinates
    
    sort(P, P+num_points, comp_angle);
    
    // convex_hull is a structure array that will give the final answer
    
    struct point convex_hull[num_points];
    convex_hull[0]=P[0];
    convex_hull[1]=P[1];    
    convex_hull[2]=P[2];        
    int count_ch=3; //count of number of coordinates in convex_hull
    for(i=3;i<num_points;++i)
    {
                             
            // if the top 2 points in convex_hull and the current point(P[i]) rotate in clockwise direction,
            // then we must remove all those points from the convex_hull that rotate in clockwise direction with P[i] till we
            // get a triplet(top 2 points of convex_hull and P[i]) that rotates in anti-clockwise direction
            
          while(check_rotation(convex_hull[count_ch-2],convex_hull[count_ch-1],P[i])<=0) 
          {
                 count_ch--;
          }
          convex_hull[count_ch]=P[i];
          count_ch++;
    }
    
    // finally we get the convex hull with points going in anti-clockwise direction
    
    for(i=0;i<count_ch;++i)
    {
                             printf("%d %d\n",convex_hull[i].x, convex_hull[i].y);
    }
    return 0;    
}
